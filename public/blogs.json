[
  {
    "id": 1,
    "blogTitle": "Angular's New Control Flow",
    "subtitle": "Exploring @if, @for, and @switch",
    "author": "Alex Angular",
    "dateTime": "2023-10-27T10:00:00Z",
    "imageUrl": "fossmec_logo.jpg",
    "description": "AAngular recently introduced a new, built-in control flow syntax that simplifies templates and improves performance. This post dives into how to use @if, @for, and @switch effectively, replacing the need for CommonModule directives in many cases.Angular recently introduced a new, built-in control flow syntax that simplifies templates and improves performance. This post dives into how to use @if, @for, and @switch effectively, replacing the need for CommonModule directives in many cases.Angular recently introduced a new, built-in control flow syntax that simplifies templates and improves performance. This post dives into how to use @if, @for, and @switch effectively, replacing the need for CommonModule directives in many cases.Angular recently introduced a new, built-in control flow syntax that simplifies templates and improves performance. This post dives into how to use @if, @for, and @switch effectively, replacing the need for CommonModule directives in many cases.Angular recently introduced a new, built-in control flow syntax that simplifies templates and improves performance. This post dives into how to use @if, @for, and @switch effectively, replacing the need for CommonModule directives in many cases.Angular recently introduced a new, built-in control flow syntax that simplifies templates and improves performance. This post dives into how to use @if, @for, and @switch effectively, replacing the need for CommonModule directives in many cases.Angular recently introduced a new, built-in control flow syntax that simplifies templates and improves performance. This post dives into how to use @if, @for, and @switch effectively, replacing the need for CommonModule directives in many cases.Angular recently introduced a new, built-in control flow syntax that simplifies templates and improves performance. This post dives into how to use @if, @for, and @switch effectively, replacing the need for CommonModule directives in many cases.Angular recently introduced a new, built-in control flow syntax that simplifies templates and improves performance. This post dives into how to use @if, @for, and @switch effectively, replacing the need for CommonModule directives in many cases.Angular recently introduced a new, built-in control flow syntax that simplifies templates and improves performance. This post dives into how to use @if, @for, and @switch effectively, replacing the need for CommonModule directives in many cases.Angular recently introduced a new, built-in control flow syntax that simplifies templates and improves performance. This post dives into how to use @if, @for, and @switch effectively, replacing the need for CommonModule directives in many cases.Angular recently introduced a new, built-in control flow syntax that simplifies templates and improves performance. This post dives into how to use @if, @for, and @switch effectively, replacing the need for CommonModule directives in many cases.Angular recently introduced a new, built-in control flow syntax that simplifies templates and improves performance. This post dives into how to use @if, @for, and @switch effectively, replacing the need for CommonModule directives in many cases.Angular recently introduced a new, built-in control flow syntax that simplifies templates and improves performance. This post dives into how to use @if, @for, and @switch effectively, replacing the need for CommonModule directives in many cases.Angular recently introduced a new, built-in control flow syntax that simplifies templates and improves performance. This post dives into how to use @if, @for, and @switch effectively, replacing the need for CommonModule directives in many cases.Angular recently introduced a new, built-in control flow syntax that simplifies templates and improves performance. This post dives into how to use @if, @for, and @switch effectively, replacing the need for CommonModule directives in many cases.Angular recently introduced a new, built-in control flow syntax that simplifies templates and improves performance. This post dives into how to use @if, @for, and @switch effectively, replacing the need for CommonModule directives in many cases.Angular recently introduced a new, built-in control flow syntax that simplifies templates and improves performance. This post dives into how to use @if, @for, and @switch effectively, replacing the need for CommonModule directives in many cases.Angular recently introduced a new, built-in control flow syntax that simplifies templates and improves performance. This post dives into how to use @if, @for, and @switch effectively, replacing the need for CommonModule directives in many cases.Angular recently introduced a new, built-in control flow syntax that simplifies templates and improves performance. This post dives into how to use @if, @for, and @switch effectively, replacing the need for CommonModule directives in many cases.Angular recently introduced a new, built-in control flow syntax that simplifies templates and improves performance. This post dives into how to use @if, @for, and @switch effectively, replacing the need for CommonModule directives in many cases.Angular recently introduced a new, built-in control flow syntax that simplifies templates and improves performance. This post dives into how to use @if, @for, and @switch effectively, replacing the need for CommonModule directives in many cases.Angular recently introduced a new, built-in control flow syntax that simplifies templates and improves performance. This post dives into how to use @if, @for, and @switch effectively, replacing the need for CommonModule directives in many cases.Angular recently introduced a new, built-in control flow syntax that simplifies templates and improves performance. This post dives into how to use @if, @for, and @switch effectively, replacing the need for CommonModule directives in many cases.ngular recently introduced a new, built-in control flow syntax that simplifies templates and improves performance. This post dives into how to use @if, @for, and @switch effectively, replacing the need for CommonModule directives in many cases."
  },
  {
    "id": 2,
    "blogTitle": "Getting Started with Standalone Components",
    "author": "Sarah Standalone",
    "dateTime": "2023-10-25",
    "description": "Standalone components, introduced in Angular 14 and becoming the default in v17, offer a more streamlined way to build applications without NgModules. Learn the basics and how to migrate existing projects.",
    "imageUrl": "assets/images/components.jpg"
  },
  {
    "id": 3,
    "blogTitle": "Understanding HttpClient in Angular",
    "subtitle": "Fetching data like a pro",
    "description": "Making HTTP requests is fundamental to most web applications. This post covers the essentials of Angular's HttpClient, including GET requests, error handling, and working with Observables.",
    "author": "Chris Client"
  },
  {
    "id": 4,
    "blogTitle": "Minimal Post Example",
    "description": "This post only has the required fields: a title and a description. All optional fields like image, author, date, and subtitle are omitted to demonstrate the child component's handling of optional inputs."
  }
]
